/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.rev.RevHubOrientationOnRobot;
import com.qualcomm.hardware.rev.RevBlinkinLedDriver;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name="OBJTeleOP", group="Linear OpMode")
public class OBJTeleOP extends LinearOpMode {
    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        IMU imu = hardwareMap.get(IMU.class, "imu");
        IMU.Parameters parameters = new IMU.Parameters(new RevHubOrientationOnRobot(
                RevHubOrientationOnRobot.LogoFacingDirection.LEFT,
                RevHubOrientationOnRobot.UsbFacingDirection.BACKWARD));
        // Without this, the REV Hub's orientation is assumed to be logo up / USB forward
        imu.initialize(parameters);
        DcMotor rhinoHorn = hardwareMap.get(DcMotor.class, "Rhino Horn");

        // wheels
        ElapsedTime runtime = new ElapsedTime();
        DcMotor frontLeft = hardwareMap.get(DcMotor.class, "Front Left Wheel");
        DcMotor backLeft = hardwareMap.get(DcMotor.class, "Back Left Wheel");
        DcMotor frontRight = hardwareMap.get(DcMotor.class, "Front Right Wheel");
        DcMotor backRight = hardwareMap.get(DcMotor.class, "Back Right Wheel");

        frontLeft.setDirection(DcMotor.Direction.REVERSE);
        backLeft.setDirection(DcMotor.Direction.REVERSE);
        frontRight.setDirection(DcMotor.Direction.FORWARD);
        backRight.setDirection(DcMotor.Direction.FORWARD);

        frontLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        backLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        frontRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        backRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);

        // slides
        DcMotor leftSlide = hardwareMap.get(DcMotor.class, "Left Slide");
        DcMotor rightSlide = hardwareMap.get(DcMotor.class, "Right Slide");
        DcMotor intakeSlide = hardwareMap.get(DcMotor.class, "Intake Slide");

        leftSlide.setDirection(DcMotorSimple.Direction.REVERSE);

        leftSlide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightSlide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        intakeSlide.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        leftSlide.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        rightSlide.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        intakeSlide.setTargetPosition(50);
        intakeSlide.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);


        // outtake
        Servo outtakeGrasp = hardwareMap.get(Servo.class, "Outtake Grasp");
        Servo outtakeFlip = hardwareMap.get(Servo.class, "Outtake Flip");

        // intake
        CRServo gantryLeft = hardwareMap.get(CRServo.class, "Gantry Left");
        CRServo gantryRight = hardwareMap.get(CRServo.class, "Gantry Right");
        Servo wristLeft = hardwareMap.get(Servo.class, "Diff Wrist Left");
        Servo wristRight = hardwareMap.get(Servo.class, "Diff Wrist Right");
        Servo wristGrasp = hardwareMap.get(Servo.class, "Diff Wrist Grasp");

        waitForStart();
        runtime.reset();
        // toggles so they don't reset every tick
        boolean clawOpen = true;
        boolean flipIn = true;
        boolean specHang = false;
        boolean specBuck = true;
        int maxSlidePos = -4350;
        boolean specState = true;
        boolean hangState = false;
        boolean transfer = false;
        double wristLeftPos = 1;
        double wristRightPos = 0;
        boolean up = false;
        double wristGraspPos;
        boolean open = true;


        double timeSinceClawToggle = runtime.seconds();
        double timeSinceFlipToggle = runtime.seconds();
        double timeSinceJointToggle = runtime.seconds();
        double timeSinceGraspToggle = runtime.seconds();
        double timeSinceSlideToggle = runtime.seconds();
        double timeSinceStateToggle = runtime.seconds();


        while (opModeIsActive()) {
            //wheels
            double y = -gamepad1.left_stick_y;
            double x = gamepad1.left_stick_x;
            double rx = gamepad1.right_stick_x;

            if (gamepad1.options) {
                imu.resetYaw();
            }

            double botHeading = imu.getRobotYawPitchRollAngles().getYaw(AngleUnit.RADIANS);

            // Rotate the movement direction counter to the bot's rotation
            double rotX = x * Math.cos(-botHeading) - y * Math.sin(-botHeading);
            double rotY = x * Math.sin(-botHeading) + y * Math.cos(-botHeading);

            rotX = rotX * 1.1;  // Counteract imperfect strafing

            // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio,
            // but only if at least one is out of the range [-1, 1]
            double denominator = Math.max(Math.abs(rotY) + Math.abs(rotX) + Math.abs(rx), 1);

            //double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double multiplier = Math.max(gamepad1.left_trigger, 0.3);

            double flPower = multiplier * ((rotY + rotX + rx) / denominator);
            double blPower = multiplier * ((rotY - rotX + rx) / denominator);
            double frPower = multiplier * ((rotY - rotX - rx) / denominator);
            double brPower = multiplier * ((rotY + rotX - rx) / denominator);

            frontLeft.setPower(flPower);
            backLeft.setPower(blPower);
            frontRight.setPower(frPower);
            backRight.setPower(brPower);

            // slides
            double slidePower = gamepad2.left_trigger - gamepad2.right_trigger;
            double intakeSlidePower = gamepad2.right_stick_y;

            int lsPosition = leftSlide.getCurrentPosition();
            int rsPosition = rightSlide.getCurrentPosition();
            int isPosition = intakeSlide.getCurrentPosition();


            if (!specState || hangState){
                maxSlidePos = 4350;
            }
            else{
                if (specBuck) {
                    maxSlidePos = 4350;
                } else if (specHang) {
                    maxSlidePos = 1800;
                } else {
                    maxSlidePos = 60;
                }
            }

            if (gamepad2.dpad_down && runtime.seconds() - timeSinceSlideToggle > 0.5){
                specBuck = true;
                timeSinceSlideToggle = runtime.seconds();
            }

            if (gamepad2.dpad_up && runtime.seconds() - timeSinceSlideToggle > 0.5) {
                specBuck = false;
                specHang = !specHang;
                timeSinceSlideToggle = runtime.seconds();
            }
            if (gamepad2.start && runtime.seconds() - timeSinceStateToggle > 1){
                specState = !specState;
                timeSinceStateToggle = runtime.seconds();
            }
            if (gamepad2.back && runtime.seconds() - timeSinceStateToggle > 1){
                hangState = !hangState;
                timeSinceStateToggle = runtime.seconds();
            }

            if (gamepad2.dpad_left) {
                frontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                backLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                frontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                backRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
                frontLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                backLeft.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                frontRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
                backRight.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
            }

            if (((lsPosition > maxSlidePos) || (rsPosition > maxSlidePos)) && slidePower >= 0) {

                leftSlide.setPower(0.1);
                rightSlide.setPower(0.1);

            } else {

                leftSlide.setPower(slidePower);
                rightSlide.setPower(slidePower);
            }
            /*
           if (intakeSlidePower >  0) {
               intakeSlide.setTargetPosition(intakeOut);
               intakeSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
               intakeSlide.setPower(1);
            }

            if (intakeSlidePower < 0) {
               intakeSlide.setTargetPosition(intakeIn);
               intakeSlide.setMode(DcMotor.RunMode.RUN_TO_POSITION);
               intakeSlide.setPower(1);
            }
            */
            if (hangState) {
                intakeSlide.setPower(0.2);
            }
            else {
                intakeSlide.setPower(intakeSlidePower);
            }
            // outtake
            double clawPos;
            double flipPos = 0.795;

            if (gamepad1.a && runtime.seconds() - timeSinceClawToggle > 0.5) {
                clawOpen = !clawOpen;
                timeSinceClawToggle = runtime.seconds();
            }
            if (clawOpen) {
                clawPos = 0.3;
            } else {
                clawPos = 0.4;
            }
            if (gamepad1.b && runtime.seconds() - timeSinceFlipToggle > 0.5) {
                if (!specState) {
                    transfer = !transfer;
                    timeSinceFlipToggle = runtime.seconds();
                }
                else{
                    flipIn = !flipIn;
                    timeSinceFlipToggle = runtime.seconds();
                }
            }
            if (!specState && !hangState){
                if ((lsPosition > 2500)|| (rsPosition > 2500)){
                    flipIn = false;
                }
                else{
                    flipIn = true;
                }
            }
            if (flipIn) {
                flipPos = 1;
            } else {
                flipPos = 0.5;
            }

            outtakeGrasp.setPosition(clawPos);
            outtakeFlip.setPosition(flipPos);

            // intake
            double YPower;
            double XPower;
            double ix = gamepad2.left_stick_x;
            double iy = gamepad2.left_stick_y;
            double idenominator = Math.max(Math.abs(y)+Math.abs(x), 1);
            double yMax = 15000;
            double xMax = 5000;
            //encoder stuff
            int riPos = -intakeSlide.getCurrentPosition();
            int lePos = rhinoHorn.getCurrentPosition();
            int xPos = (riPos - lePos)/2;
            int yPos = xPos + lePos;

            if (yPos >= yMax && y < 0){
                iy = 0;
            }
            if (xPos > xMax && x>0){
                ix=0;
            }
            if (-xPos > xMax && x<0){
                ix=0;
            }
            gantryLeft.setPower((-iy-ix)/idenominator);
            gantryRight.setPower((-ix+iy)/idenominator);

            if (gamepad2.a && runtime.seconds() - timeSinceJointToggle > 0.5){
                up = !up;
                timeSinceJointToggle = runtime.seconds();
            }
            if (up){
                wristLeftPos = 0.1;
                wristRightPos = 0.9;
            }
            else{
                wristLeftPos = 1;
                wristRightPos = 0;
            }
           if (gamepad2.b && runtime.seconds() - timeSinceGraspToggle > 0.25){
                open = !open;
                timeSinceGraspToggle = runtime.seconds();
            }
            if (open){
                wristGraspPos = 0.3;
            }
            else{
                wristGraspPos = 0.57;
            }
            wristGrasp.setPosition(wristGraspPos);
            wristLeft.setPosition(wristLeftPos);
            wristRight.setPosition(wristRightPos);

            //rhino arm (hang)
            if (gamepad1.x) {
                rhinoHorn.setPower(1);
            } else if (gamepad1.y) {
                rhinoHorn.setPower(-0.5);
            } else {
                rhinoHorn.setPower(0);
            }

            // telemetry

            telemetry.addData("Status", "Run Time: " + runtime.toString());
            telemetry.addData("Doing Specimens?", specState);
            telemetry.addData("Hanging?", hangState);
            telemetry.addData("Transfering? ", transfer);
            telemetry.addData("Left slide pos ", lsPosition);
            telemetry.addData("Right side pos", rsPosition);
            telemetry.addData("y pos gantry", yPos);
            telemetry.addData("x pos cantry", xPos);

            telemetry.addData("flippos", flipPos);

            telemetry.addData("wrist left", wristLeftPos);
            telemetry.addData("wrist right", wristRightPos);

            telemetry.update();

        }
    }
}
